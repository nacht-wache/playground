name: Ubuntu Base Build

on:
  workflow_call:
    inputs:
      c_compiler:
        required: true
        type: string
        description: 'The C compiler to use (e.g., gcc, clang-17)'
      cpp_compiler:
        required: true
        type: string
        description: 'The C++ compiler to use (e.g., g++, clang++-17)'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Clang tools
        if: contains(inputs.c_compiler, 'clang')
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format-17 clang-tidy-17

      - name: Check formatting with clang-format
        if: contains(inputs.c_compiler, 'clang')
        run: |
          find . -not -path "./_deps/*" -name "*.cpp" -o -name "*.h" | xargs clang-format-17 --Werror --dry-run --style=file

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ inputs.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ inputs.c_compiler }}
          -DCMAKE_BUILD_TYPE=Release
          -S ${{ github.workspace }}
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy
        if: contains(inputs.c_compiler, 'clang')
        run: |
          find . -not -path "./_deps/*" -not -path "./build/*" -name "*.cpp" | xargs run-clang-tidy-17.py -p ${{ steps.strings.outputs.build-output-dir }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config Release
